#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–∞–Ω–∞–ª info –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
 * –ò—Å–ø–æ–ª—å–∑—É–µ—Ç gRPC API Centrifugo –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
 * –°–æ–≤–º–µ—Å—Ç–∏–º —Å Centrifugo v5
 */

import * as grpc from '@grpc/grpc-js';
import * as protoLoader from '@grpc/proto-loader';
import * as path from 'path';

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const GRPC_PORT = 10001;
const GRPC_HOST = 'localhost';
const CHANNEL = 'info';
const INTERVAL_MS = 5000; // 5 —Å–µ–∫—É–Ω–¥

interface PublishRequest {
  channel: string;
  data: Buffer;
}

interface PublishResponse {
  error?: {
    code: number;
    message: string;
  };
  result?: any;
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let messageCounter = 0;
let grpcClient: any = null;

/**
 * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è gRPC –∫–ª–∏–µ–Ω—Ç–∞
 */
function initGrpcClient(): boolean {
  try {
    // –ü—É—Ç—å –∫ proto —Ñ–∞–π–ª—É Centrifugo (–∏—Å–ø–æ–ª—å–∑—É–µ–º process.cwd() –≤–º–µ—Å—Ç–æ __dirname)
    const protoPath = path.join(process.cwd(), 'proto', 'api.proto');
    
    console.log(`üìÅ –ó–∞–≥—Ä—É–∂–∞–µ–º proto —Ñ–∞–π–ª: ${protoPath}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º proto —Ñ–∞–π–ª
    const packageDefinition = protoLoader.loadSync(protoPath, {
      keepCase: true,
      longs: String,
      enums: String,
      defaults: true,
      oneofs: true
    });
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–µ—Ä–≤–∏—Å CentrifugoApi (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–º–µ—Ä–µ)
    const centrifugoProto = (grpc.loadPackageDefinition(packageDefinition) as any).centrifugal.centrifugo.api;
  
    
    // –°–æ–∑–¥–∞–µ–º gRPC –∫–ª–∏–µ–Ω—Ç —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ–ø—Ü–∏—è–º–∏
    const channelOptions = {
      'grpc.keepalive_time_ms': 6 * 60 * 1000,
      'grpc.keepalive_timeout_ms': 5 * 1000,
      'grpc.keepalive_permit_without_calls': 1,
    };
    
    grpcClient = new centrifugoProto.CentrifugoApi(
      `${GRPC_HOST}:${GRPC_PORT}`,
      grpc.credentials.createInsecure(),
      channelOptions
    );

    console.log(`üîå gRPC –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –¥–ª—è ${GRPC_HOST}:${GRPC_PORT}`);
    return true;
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ gRPC –∫–ª–∏–µ–Ω—Ç–∞:', (error as Error).message);
    console.error('üîç Stack trace:', (error as Error).stack);
    return false;
  }
}

/**
 * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ gRPC API
 */
async function sendMessage(): Promise<PublishResponse> {
  try {
    if (!grpcClient) {
      throw new Error('gRPC –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    messageCounter++;
    
    // –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∫–∞–∫ –≤ –ø—Ä–∏–º–µ—Ä–µ –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏)
    const messageData = {
      type: CHANNEL,
      timestamp: new Date().toISOString(),
      nodeVersion: process.version
    };

    // –°–æ–∑–¥–∞–µ–º –ø—É–±–ª–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ gRPC (—Ç–æ–ª—å–∫–æ channel –∏ data)
    const publishRequest: PublishRequest = {
      channel: CHANNEL,
      data: Buffer.from(JSON.stringify(messageData))
    };

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ gRPC (–∫–∞–∫ –≤ —Ä–∞–±–æ—á–µ–º –ø—Ä–∏–º–µ—Ä–µ)
    return new Promise<PublishResponse>((resolve, reject) => {
      grpcClient.publish(publishRequest, (error: grpc.ServiceError | null, response: PublishResponse) => {
        if (error) {
          // gRPC —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–∫–∏
          console.error('‚ùå gRPC Transport Error:', error.code, error.details);
          reject(new Error(`gRPC Error: ${error.code} - ${error.details}`));
          return;
        }

        if (response.error && response.error.code) {
          // Centrifugo API —É—Ä–æ–≤–µ–Ω—å –æ—à–∏–±–∫–∏
          console.error('‚ùå Centrifugo API Error:', response.error.code, response.error.message);
          reject(new Error(`Centrifugo Error: ${response.error.code} - ${response.error.message}`));
          return;
        }

        resolve(response);
      });
    });
    
  } catch (error) {
    throw error;
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main(): Promise<void> {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ Centrifugo v5 —á–µ—Ä–µ–∑ gRPC');
  console.log(`üìç gRPC Host: ${GRPC_HOST}:${GRPC_PORT}`);
  console.log(`üì° –ö–∞–Ω–∞–ª: ${CHANNEL}`);
  console.log(`‚è±Ô∏è  –ò–Ω—Ç–µ—Ä–≤–∞–ª: ${INTERVAL_MS / 1000} —Å–µ–∫—É–Ω–¥`);
  console.log('---');

  // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º gRPC –∫–ª–∏–µ–Ω—Ç
  if (!initGrpcClient()) {
    console.error('üí• –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å gRPC –∫–ª–∏–µ–Ω—Ç. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.');
    process.exit(1);
  }

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  async function sendMessageWithLogging(): Promise<void> {
    try {
      const result = await sendMessage();
      console.log(`[${new Date().toLocaleTimeString()}] ‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ #${messageCounter} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª ${CHANNEL}`);
      console.log(`   üì° –†–µ–∑—É–ª—å—Ç–∞—Ç:`, JSON.stringify(result, null, 2));
    } catch (error) {
      console.error(`[${new Date().toLocaleTimeString()}] ‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è #${messageCounter}:`, (error as Error).message);
      
      if ((error as Error).message.includes('14')) {
        console.error('   üîå –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ gRPC —Å–µ—Ä–≤–µ—Ä—É. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Centrifugo –∑–∞–ø—É—â–µ–Ω —Å gRPC API –Ω–∞ –ø–æ—Ä—Ç—É 10000');
      } else if ((error as Error).message.includes('UNAVAILABLE')) {
        console.error('   üîå gRPC —Å–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é Centrifugo');
      } else if ((error as Error).message.includes('PERMISSION_DENIED')) {
        console.error('   üîë –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ gRPC. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏');
      } else if ((error as Error).message.includes('NOT_FOUND')) {
        console.error('   üìÅ –ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞');
      }
    }
  }

  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å—Ä–∞–∑—É
  await sendMessageWithLogging();

  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
  const intervalId = setInterval(sendMessageWithLogging, INTERVAL_MS);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
  process.on('SIGINT', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGINT, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    clearInterval(intervalId);
    if (grpcClient) {
      grpcClient.close();
    }
    process.exit(0);
  });

  process.on('SIGTERM', () => {
    console.log('\nüõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...');
    clearInterval(intervalId);
    if (grpcClient) {
      grpcClient.close();
    }
    process.exit(0);
  });

  console.log('üìù –°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏.');
}

// –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞
main().catch((error: Error) => {
  console.error('üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞:', error);
  if (grpcClient) {
    grpcClient.close();
  }
  process.exit(1);
});
